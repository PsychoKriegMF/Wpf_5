Стиль - это коллекция значений свойств, которые могут применяться к элементу. Система стилей  WPF играет ту же роль,
которую играет стандарт каскадных таблиц стилей(CSS) в HTML-разметке.

Ключевые свойства, необходимые для создания стилей:
- Setters - коллекция обьектов, которые устанавливают значения для свойств и присоединяют обработчики событий автоматически.
- Triggers - коллекция обьектов, которые позволяют автоматически изменять настройки стиля. Настройки стиля могут модифицироваться,
например, при изменении значения какого -то другого свойства или при поступлении какого -нибудь события.
- Resource - коллекция ресурсов, которые должны использоваться со стилями. Например, может понадобиться использовать единственный обьектдля установки нескольких свойств.
В таком случае более эффективно создать обьект как ресурс и затем использовать этот ресурс в обьекте Setter.
- BasedOn - свойство, которое позволяет создавать более специализированный стиль, наследующий (и дополнительно переопределяющий) параметры другого стиля.
- TargetType - свойство, которое идентифицирует тип элемента, к которому применяется данный стиль. Это свойство позволяет создавать обьекты Setter, влияющие только на определенные элементы.

Обьекты Setter имеют два свойства:
- Property - указывает на свойство, к которому будет применяться данный сеттер
- Value - устанавливает значение.


=========================================  ТРИГЕРЫ  ================================================

Тригеры позволяют изменить значения свойств при изменении определенных условий.

Виды тригеров:
- Trigger - простейшая форма триггера. Он следит за изменением в свойстве зависимости и затем использует средство установки для изменения стиля;
- MultiTrigger - поддерживает проверку множества условий. Этот триггер вступает в действие, только если удовлетворены все заданные условия;
- DataTrigger - работает с привязкой данных. Он следит за изменением в любых связанных данных;
- MultiDataTrigger - обьеденяет множество триггеров данных;
- EventTrigger - применяет анимацию, когда возникает соответствующее событие.

======================================================================================================

                   Работа с файловой системой
Методы класса File:
- Copy(исходный путь файла, финальный путь файла) - копирует файл в новое место. Если файл с таким названием уже существует в конечной директории, то вызывается исключение;
- Create(путь к файлу) - создать файл. Если файл с таким названием уже существует в конечной директории, то он перезаписывается;
- Delete(путь к файлу) - удаляет файл;
- Move(исходный путь файла, финальный путь файла) - перемещает файл в новое место. Может переименовать перемещаемый файл;
- Exist(путь к файлу) - определяет, существует ли указанный файл;
- Close() - закрывает поток, который открывается при использовании большинства методов для работы с файлами. Необходимо вызывать данный метод для высвобождения процессорного времени и завершения работы с файлом.
- AppendAllLines(путь к файлу, список строк) - добавляет в файл набор строк. Если файл не существует, то он создается;
- AppendAllText(путь к файлу, строка для записи) - добавляет в файл строку;
- string[] ReadAllLines(путь к файлу) - считывает содержимое текстового файла в массив строк;
- string[] ReadAllText(путь к файлу) - считывает содержимое текстового файла в строку;
- void WriteAllLines(путь к файлу, массив строк) - записывают массив строк в текстовый файл. Если файл не существует, он создается. Если существует, то  перезаписывается;

Метод Directiry.GetCurrentDirectory() - позволяет получить текущую директорию приложения.
System.IO.Path.Combain(строка_1,...строка_4) - комбинирует от двух до четырех строк в виде пути к файлу. Например:
string OutputFileDir =System.IO.Path.Combain(Directory.GetCurrentDirectory(), "Files", "output.txt")

Список основных свойств класса SaveFileDialog:
- DefaultDirectory - устанавливает каталог, который будет открыт в диалоговом окне по умолчанию;
- FileName - Хранит или устанавливает строкус полным путем до выбранного файла(в том числе название и расширение);
- Filter - устанавливает возможные расширения файлов в диалоговом окне. Например: "Normal text file(*.txt)*.txt". первая часть до вертикальной черты определяет заголовок фильтра, а после - расширение, которое требуется отображать.

Если требуется более одного фильтра, то становится еще одна вертикальная черта и пишется новый фильтр;
- OverwritePrompt - устанавливает, будет ли выводиться предупреждение о перезаписи сущетвующего файла. По умолчанию true;
- SaveFileDialog - содержит только название созданного файла;
- Title - устанавливает заголовок диалогового окна.
Чтобы вызвать диалоговое окно, используется метод ShowDialog, после чего можно проверить, выбран ли объект, сравнив результат метода с true: if(saveFile.ShowDialog() = true)

========================================================================================================

                   Работа с форматом JSON
Основных метода два и оба находятся в пространстве имен System.Text.Json:
- string JsonSerializer.Serialize(обьект сериализации) - для формирования строки в формате JSON(сериализации);
- T JsonSerializer.Deserialize<T>(строка в формате JSON) - для преобразования строкаи формата JSON в тип Т(десериализация). Здесь важно уточнить, что для десериализации нужно, чтобы у класса Т был объявлен пустой конструктор.


                   Команды в WPF

    




